--- src/pari.h	2017-08-05 13:17:21.000000000 +0200
+++ src.new/pari.h	2017-12-29 19:43:49.888355004 +0100
@@ -4,7 +4,12 @@
 #include "first.h"
 #include <string>
 
-typedef long * GEN;
+// pari defines long as long long ifdef _WIN64
+#if defined(_WIN64) && defined(HAVE_LIBPARI)
+  typedef long long * GEN;
+#else  
+  typedef long * GEN;
+#endif
 
 #ifndef NO_NAMESPACE_GIAC
 namespace giac {
@@ -29,7 +34,11 @@
   bool pari_lift_combine(const vecteur & a,const std::vector<vecteur> & factmod,gen & modulo,std::vector<vecteur> & res);
   gen _pari(const gen & args,GIAC_CONTEXT);
   std::string pari_help(const gen & g);
+#if defined(_WIN64) && defined(HAVE_LIBPARI)
+  bool pari_polroots(const vecteur & p,vecteur & res,long long l,GIAC_CONTEXT);
+#else
   bool pari_polroots(const vecteur & p,vecteur & res,long l,GIAC_CONTEXT);
+#endif  
   gen GEN2gen(const GEN & G,const vecteur & vars);
   GEN gen2GEN(const gen & e,const vecteur & vars,GIAC_CONTEXT);
   bool pari_polresultant(const gen & p,const gen & q,const vecteur & lv,gen & res,GIAC_CONTEXT);
--- src/pari.cc	2017-03-20 09:54:53.000000000 +0100
+++ src.new/pari.cc	2017-08-30 01:29:20.680064131 +0200
@@ -199,11 +199,11 @@
     reverse(res.begin(),res.end());
     long vn=varn(G);
     gen x;
-    if (vn<long(vars.size())){
+    if (vn<(long)(vars.size())){
       x=vars[vn];
       return symb_horner(res,x);
     }
-    if (!vars.empty() && vn==long(vars.size())){
+    if (!vars.empty() && vn==(long)(vars.size())){
       x=vars[vn-1];
       return symb_horner(res,x);
     }
