# This tool is just used to built de file giacpy.pyi during updates.
# it is not used by giacpy itself
#
# building giacpy.pyi
Mi=open("giacpy.pyi","w")
Mi.write("# file auto generated by mkgiacpy_pyi.py\n")
s='from typing import Any\n\n'
Mi.write(s)

import giacpy
D=giacpy.__dict__

from giacpy import Pygen

Pygendoc="The class Pygen is the main tool to interact from python/sage with the c++\n     library giac via cython.  The initialisation of a Pygen just create an object\n     in giac, but the mathematical computation  is not done. This class is mainly\n     for cython users.  Here A is a Pygen element, and it is ready for any giac\n     function.::\n\n     >>> from giacpy import Pygen\n     >>> A = Pygen('2+2')\n     >>> A\n     2+2\n     >>> A.eval()\n     4\n\n     In general, you may prefer to directly create a Pygen and execute the\n     evaluation in giac. This is exactly the meaning of the :func:`libgiac`\n     function.::\n\n     >>> a = giac('2+2')\n     >>> a\n     4\n     >>> isinstance(a, Pygen)\n     True\n"

Mi.write("# file auto generated by mkkeywords.py\n")
s='class Pygen():\n     """\n     %s'%(Pygendoc)
s+='\n     """\n\n'
Mi.write(s)
Mi.write('\n     @classmethod\n')

cythonmethods= ['_repr_latex_','_repr_html_','qcas']
for i in cythonmethods:
    s =  "     def "+i+"(self,*args):\n\n"
    Mi.write(s)

from giacpy import Pygen
s =  "     def save(self,*args):\n"
s += "        r'''%s\n        '''\n"%(Pygen.save.__doc__)
Mi.write(s)

    



from mkkeywords import mostkeywords, moremethods

Mi.write('     ####################################################\n')
Mi.write('     #### Pygen methods from giac  functions ############\n')
Mi.write('     ####################################################\n\n')
for i in mostkeywords+moremethods:
    import subprocess
    from subprocess import Popen
    p = Popen(["cas_help", i], stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
    doc = p.communicate()[0]

    doc = doc.replace("\n", "\n        ")  # Indent doc
    s =  "     def "+i+"(self,*args)->Pygen:\n"
    s += "        r'''From Giac's documentation:\n        "+doc+"\n        '''\n\n"
    Mi.write(s)
   






Mi.write('####################################################\n')
Mi.write('#### giac  functions ##############################\n')
Mi.write('####################################################\n\n')
for i in giacpy.__dict__:
    import subprocess
    from subprocess import Popen
    p = Popen(["cas_help", i], stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
    #doc = p.communicate()[0]
    if not i.startswith("_") and i not in ['giacpy','Pyversioninfo']:
        doc = (D[i]).__doc__
        if doc != None:
            doc = doc.replace("\n", "\n        ")  # Indent doc
            s =  "def "+i+"(self,*args)->Pygen:\n"
            if i in ['giac','giacsettings','loadgiacgen','qcas']:
                s += "        r'''"+doc+"\n        '''\n"
            else:
                s += "        r'''From Giac's documentation:\n        "+doc+"\n        '''\n"
            Mi.write(s)

Mi.close()

